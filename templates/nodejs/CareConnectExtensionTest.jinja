// This code was autogenerated from {{ extension.scriptname }}

const {{ extension.classname }} = require('../{{ extension.filename }}')

describe('Care Connect Extension {{ extension.classname }}', function () {
  describe('Object constructor', function () {
    it('Can create object', function () {
      let ext = new {{ extension.classname }}()
      expect(ext).toBeInstanceOf({{ extension.classname }})
      expect(ext.url).toBe('{{ extension.url }}')
    })
  })
  describe('Object getters and setters', function () {
  {% if 'extension' in extension.typeCodeList %}
  {% for slice in extension.slices %}
  {% if slice.has_value %}
    it('Get/Set {{ slice.name }}', function () {
      let ext = new {{ extension.classname }}()
      // {{ slice.valueType }}
      {% if slice.valueType == 'codeableconcept' %}
      ext.{{ slice.name }} = { 'code': 'somecode', 'display': 'some display' , 'system': 'somesystem' }
      let value = ext.{{ slice.name }}
      expect(value.code).toBe('somecode')
      expect(value.display).toBe('some display')
      {% elif slice.valueType == 'reference' %}
      ext.{{ slice.name }} = { 'display': 'some display', 'reference': 'someref' }
      let value = ext.{{ slice.name }}
      expect(value.reference).toBe('someref')
      expect(value.display).toBe('some display')
      {% else %}
      ext.{{ slice.name }} = 'foobar'
      {% endif %}
    })
  {% endif %}
  {% if slice.has_choice %}
  {% for t in slice.typeCodeListValueValue %}
    it('Get/Set {{ slice.name }}{{ t }}', function () {
      {% if t == 'valueReference' %}
      let ext = new {{ extension.classname }}()
      ext.{{ slice.name }}{{ t }} = { 'display': 'some display', 'reference': 'someref' }
      let value = ext.{{ slice.name }}{{ t }}
      expect(value.reference).toBe('someref')
      expect(value.display).toBe('some display')
      {% elif t == 'valueCoding' %}
      let ext = new {{ extension.classname }}()
      ext.{{ slice.name }}{{ t }} = { 'code': 'somecode', 'display': 'some display' , 'system': 'somesystem' }
      let value = ext.{{ slice.name }}{{ t }}
      expect(value.code).toBe('somecode')
      expect(value.display).toBe('some display')
      {% elif t == 'valuePeriod' %}
      let ext = new {{ extension.classname }}()
      ext.{{ slice.name }}{{ t }} = {'end': 'theend', 'start': 'thestart'}
      let value = ext.{{ slice.name }}{{ t }}
      expect(value.end).toBe('theend')
      expect(value.start).toBe('thestart')
      {% else %}
      let ext = new {{ extension.classname }}()
      ext.{{ slice.name }}{{ t }} = 'foobar'
      let value = ext.{{ slice.name }}{{ t }}
      expect(value).toBe('foobar')
      {% endif %}
    })
  {% endfor %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% if 'string' in extension.typeCodeList %}
    it('Get/Set String', function () {
      let ext = new {{ extension.classname }}()
      ext.string = 'some string'
      let s = ext.string
      expect(s).toBe('some string')
    })
  {% endif %}
  {% if 'datetime' in extension.typeCodeList %}
    it('Get/Set Datetime', function () {
      let ext = new {{ extension.classname }}()
      ext.datetime = 'some string'
      let dt = ext.datetime
      expect(dt).toBe('some string')
    })
  {% endif %}
  {% if 'boolean' in extension.typeCodeList %}
    it('Get/Set Boolean', function () {
      let ext = new {{ extension.classname }}()
      ext.boolean = true
      let bl = ext.boolean
      expect(bl).toBe(true)
    })
  {% endif %}
  {% if 'reference' in extension.typeCodeList %}
    it('Get/Set Reference', function () {
      let ext = new {{ extension.classname }}()
      ext.reference = { 'reference': 'some reference' }
      let rf = ext.reference
      expect(rf.reference).toBe('some reference')
    })
  {% endif %}
  {% if 'code' in extension.typeCodeList %}
    it('Get/Set Code', function () {
      let ext = new {{ extension.classname }}()
      ext.code = 'foo'
      let cd = ext.code
      expect(cd).toBe('foo')
    })
  {% endif %}
  {% if 'codeableconcept' in extension.typeCodeList %}
    it('Get/Set Codeableconcept', function () {
      let ext = new {{ extension.classname }}()
      if (!ext.needsSnomed() && ext.hasValueSet()) {
        ext.codeableConcept = '{{ extension.valueSetExampleCode }}'
        let cc = ext.codeableConcept
        expect(cc.code).toBe('{{ extension.valueSetExampleCode }}')
        expect(cc.display).toBe('{{ extension.valueSetExampleDisplay | replace("'","\\'") }}')
      } else if (ext.needsSnomed() && ext.hasValueSet()) {
        ext.codeableConcept = { 'code': '{{ extension.valueSetExampleCode }}', 'display': 'some display' , 'system': 'http://snomed.info/sct' }
        let cc = ext.codeableConcept
        expect(cc.code).toBe('{{ extension.valueSetExampleCode }}')
        expect(cc.display).toBe('some display')
      } else { // Has no valueset
        ext.codeableConcept = { 'code': 'somecode', 'display': 'some display' , 'system': 'somesystem' }
        let cc = ext.codeableConcept
        expect(cc.code).toBe('somecode')
        expect(cc.display).toBe('some display')
      }
    })
  {% endif %}
  })
})


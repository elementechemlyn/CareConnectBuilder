// This code was autogenerated from {{ extension.scriptname }}

const FHIRServer = require('../..')
const CareConnectBaseExtension = require('../BaseObjects/CareConnect-BaseExtension')
{% if 'codeableconcept' in extension.typeCodeList %}
let CodeableConcept = require(FHIRServer.resources.STU3.CodeableConcept)
{% if extension.valueSetModule %}
const ValueSet = require('{{ extension.valueSetModule }}')
{% endif %}
let Coding = require(FHIRServer.resources.STU3.Coding)
{% endif %}
{% if 'code' in extension.typeCodeList %}
let ValueSet = require('{{ extension.valueSetObject }}')
{% endif %}

class {{ extension.classname }} extends CareConnectBaseExtension {
  constructor (opt) {
    super(opt)
    opt && delete opt.resourceType
    Object.assign(this, opt)
    {% if 'codeableconcept' in extension.typeCodeList or 'code' in extension.typeCodeList %}
    {% if extension.valueSetModule %}
    this.valueSet = ValueSet
    {% else %}
    this.valueSet = undefined
    {% endif %}
    {% endif %}
    this.url = '{{ extension.url }}'
    {% if 'reference' in extension.typeCodeList %}
    this.targetReferences = []
    {% for ref in extension.typeTargetProfileList %}
    this.targetReferences.push('{{ ref }}')
    {% endfor %}
    {% endif %}
  }
  {% if 'extension' in extension.typeCodeList %}
  {% for slice in extension.slices %}
  {% if slice.has_value %}
  set {{ slice.name }} (value) {
    // let max = {{ slice.max}}
    // let min = {{ slice.min }}
    let ext = new CareConnectBaseExtension()
    ext.url = '{{ slice.url }}'
    ext.{{ slice.valueValueType }} = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get {{ slice.name }} () {
    let ext = this.__data.extension.find(e => e.url === '{{ slice.url }}')
    return ext && ext.{{ slice.valueValueType }}
  }
  {% endif %}
  {% if slice.has_choice %}
  {% for t in slice.typeCodeListValueValue %}
  set {{ slice.name }}{{ t }} (value) {
    // let max = {{ slice.max}}
    // let min = {{ slice.min }}
    let ext = new CareConnectBaseExtension()
    ext.url = '{{ slice.url }}'
    ext.{{ t  }} = value
    // TODO Check max/clear existing slice
    if (!this.__data.extension) {
      this.__data.extension = []
    }
    this.__data.extension.push(ext)
  }

  get {{ slice.name }}{{ t }} () {
    let ext = this.__data.extension.find(e => e.url === '{{ slice.url }}')
    return ext && ext.{{ t }}
  }
  {% endfor %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% if 'string' in extension.typeCodeList %}
  set string (st) {
    this.valueString = st
  }

  get string () {
    return this.valueString
  }
  {% endif %}
  {% if 'datetime' in extension.typeCodeList %}
  set datetime (dt) {
    this.valueDateTime = dt
  }

  get datetime () {
    return this.valueDateTime
  }
  {% endif %}
  {% if 'boolean' in extension.typeCodeList %}
  set boolean (bool) {
    this.valueBoolean = bool
  }

  get boolean () {
    return this.valueBoolean
  }
  {% endif %}
  {% if 'reference' in extension.typeCodeList %}
  set reference (newValue) {
    this.valueReference = newValue
  }

  get reference () {
    return this.valueReference
  }
  {% endif %}
  {% if 'code' in extension.typeCodeList %}
  set code (newValue) {
    this.valueCode = newValue
  }

  get code () {
    return this.valueCode
  }
  {% endif %}
  {% if 'codeableconcept' in extension.typeCodeList %}
  get codeableConcept () {
    if (this.valueSet){
      return this.valueCodeableConcept && this.valueCodeableConcept.coding &&
        this.valueCodeableConcept.coding.find(cde => this.valueSet.hasCodeSystem(cde.system))
    } else {
      return this.valueCodeableConcept.coding[0]
    }
  }

  set codeableConcept (value) {
    let valueValue = new CodeableConcept()
    let valueValueCoding = new Coding()
    let concept
    let codeSystem = this.valueSet ? this.valueSet.getCodeSystem(value.system) : undefined

    // If we don't have a display - look it up.
    if ((codeSystem) && (!value.display)) {
      // did we just get a code or an object with a code value?
      let code = value.code ? value.code : value
      concept = codeSystem.getConcept(code)
    } else {
      // Use as is.
      concept = value
    }
    if (codeSystem) {
      valueValueCoding.system = codeSystem.url
    } else {
      valueValueCoding.system = value.system
    }
    valueValueCoding.code = concept.code
    valueValueCoding.display = concept.display

    valueValue.coding = valueValueCoding
    this.valueCodeableConcept = valueValue
  }
  {% endif %}
}

module.exports = {{ extension.classname }}

